
runai submit --name run1 -i registry.bgu.ac.il/hpc/jupyter-notebook:latest -e HOME=$HOME  -g 1 --cpu-limit 16 --large-shm -- "export LD_LIBRARY_PATH=/gpfs0/bgu-benshimo/users/wavishay/env/valle2/lib:$LD_LIBRARY_PATH
 && conda activate pythn_new && cd VallE-Heb/TTS2/Pytorch/ && python ./train.py"
 
 runai submit --name run2 -i registry.bgu.ac.il/hpc/jupyter-notebook:latest -e HOME=$HOME  -g 0.4 --cpu-limit 16 --large-shm -- "export LD_LIBRARY_PATH=/gpfs0/bgu-benshimo/users/wavishay/env/valle2/lib:$LD_LIBRARY_PATH
 && conda activate pythn_new && cd VallE-Heb/TTS2/Pytorch/ && python ./train.py"




# def get_mel_durations(df: pd.DataFrame, base_dir="", hop_length=256, sampling_rate=22050) -> list:
#     durations = []
#     for path in df['mel_path']:
#         full_path = os.path.join(base_dir, path)
#         try:
#             if full_path.endswith('.npy'):
#                 mel = np.load(full_path)
#             else:
#                 mel = torch.load(full_path)
#             num_frames = mel.shape[-1]
#             duration_sec = num_frames * hop_length / sampling_rate
#             durations.append(duration_sec)
#         except Exception as e:
#             print(f"❌ Failed to load {full_path}: {e}")
#     return durations



# print("📊 Calculating mel lengths for histogram...")
# all_lengths = get_mel_durations(pd.concat([train_df, dev_df]))

# plt.figure(figsize=(10, 5))
# plt.hist(all_lengths, bins=50, color='gray', edgecolor='black')
# plt.title("Histogram of Mel Spectrogram Lengths")
# plt.xlabel("Number of Frames")
# plt.ylabel("Count")
# plt.grid(True)
# plt.tight_layout()

# # שמירה לקובץ
# histogram_path = "/gpfs0/bgu-benshimo/users/wavishay/VallE-Heb/TTS2/tacotron2/mel_length_histogram.png"
# plt.savefig(histogram_path, dpi=300)
# print(f"📁 Histogram saved to: {histogram_path}")

# plt.close()